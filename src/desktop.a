
print "[CONSOLEOS] Loading desktop ...\n";

import lib/devices/graphics/surface.a
import lib/devices/graphics/font.a
import lib/loaders/ipx.a

Surface->var wallpaper_surface = new(Surface).construct();
wallpaper_surface.texture Ipx.create_texture(CONSOLEOS_PATH_WALLPAPER_MAIN);

Font->var main_font = new(Font).construct(CONSOLEOS_PATH_FONT_MAIN);

Surface->var time_text_surface = new(Surface).construct();
fixed var time_text_surface_width; fixed var time_text_surface_height;

fixed var time_text_surface_target_x; fixed var time_text_surface_target_y;
fixed var time_text_surface_x; fixed var time_text_surface_y;

Surface->var app_hint = new(Surface).construct();
app_hint.texture main_font.create_texture("Appuyez sur " ++ console_input_button_down_name() ++ " pour voir tous vos applications", 0.09);

fixed var app_hint_text_width  = Math.pixels_x(main_font.width );
fixed var app_hint_text_height = Math.pixels_y(main_font.height);

Time->var time = new(Time).construct();

fixed var desktop_seconds;
fixed var desktop_sleep_timer;

fixed var desktop_alpha;
fixed var wallpaper_alpha;

func desktop_update_time {
	time.update();
	var seperator = ":";
	
	if (time.minute < 10) {
		seperator = ":0";
	}
	
	time_text_surface.texture main_font.create_texture(str(time.hour) ++ seperator ++ str(time.minute), 0.5);
	
	time_text_surface_width  = Math.pixels_x(main_font.width );
	time_text_surface_height = Math.pixels_y(main_font.height);
	
	time_text_surface.size time_text_surface_width, time_text_surface_height;
}

desktop_update_time();
var sleeping;

frozen var DESKTOP_SLEEP_TIME = 3.0;
frozen var DESKTOP_SLEEP_UPDATE = 30.0;

func desktop_draw(fixed var target_alpha, var fps) {
	fixed var delta = 1.0 / fps;
	
	desktop_seconds = desktop_seconds + delta;
	if (desktop_seconds >= 1.0) { // update time every 1 seconds
		desktop_update_time();
		desktop_seconds = 0;
	}
	
	var target_wallpaper_alpha = target_alpha;
	
	desktop_sleep_timer = desktop_sleep_timer + delta;
	if (desktop_sleep_timer >= DESKTOP_SLEEP_TIME) {
		target_wallpaper_alpha = 0;
		
		if (not sleeping) {
			sleeping = 1;
			
			time_text_surface_target_x = 0;
			time_text_surface_target_y = 0;
			
		} else if (desktop_sleep_timer >= DESKTOP_SLEEP_TIME + DESKTOP_SLEEP_UPDATE) {
			desktop_sleep_timer = DESKTOP_SLEEP_TIME;
			
			time_text_surface_target_x = random.range(-0.5, 0.5);
			time_text_surface_target_y = random.range(-0.5, 0.5);
		}
		
	} else {
		sleeping = 0;
	}
	
	time_text_surface_x = time_text_surface_x + (time_text_surface_target_x - time_text_surface_x) / fps * 3;
	time_text_surface_y = time_text_surface_y + (time_text_surface_target_y - time_text_surface_y) / fps * 3;
	
	desktop_alpha = desktop_alpha + (target_alpha - desktop_alpha) / fps * 3;
	wallpaper_alpha = wallpaper_alpha + (target_wallpaper_alpha - wallpaper_alpha) / fps * 3;
	
	wallpaper_surface.size 3.0 - wallpaper_alpha, 3.0 - wallpaper_alpha;
	wallpaper_surface.colour 1.0, 1.0, 1.0, wallpaper_alpha;
	wallpaper_surface.draw 0, 0, 0;
	
	time_text_surface.colour 1.0, 1.0, 1.0, desktop_alpha;
	
	if (not sleeping) {
		time_text_surface_x = -1.8 + desktop_alpha + time_text_surface_width / 2;
		time_text_surface_y = 0.8 - time_text_surface_height / 2;
	}
	
	time_text_surface.draw time_text_surface_x, time_text_surface_y, 1;
	
	app_hint.colour 1.0, 1.0, 1.0, wallpaper_alpha / 2;
	app_hint.size app_hint_text_width, app_hint_text_height;
	app_hint.draw 0, -1.1 + wallpaper_alpha / 6 + app_hint_text_height / 2, 1;
}
