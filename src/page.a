
import lib/loaders/bmp.a
import lib/loaders/ttf.a

import lib/devices/graphics/surface.a
import lib/devices/graphics/font.a

var CONSOLE_PAGE_HIDDEN = 0;
var CONSOLE_PAGE_SHOWN  = 1;

Surface->var card_shadow = new(Surface).construct();
card_shadow.texture Bmp.create_texture(CONSOLE_CARD_SHADOW_PATH);

Font->var main_font = Ttf.create_font(CONSOLE_FONT_PATH);

class Console_page {
	var target_visibility;
	var transition;
	
	Texture->var title_texture;
	Surface->var title_surface;
	
	var title_width;
	var title_height;
	
	Texture->var paragraph_texture;
	Surface->var paragraph_surface;
	
	var paragraph_width;
	var paragraph_height;
	
	class Console_card {
		Texture->var picture_texture;
		Surface->var picture_surface;
		
		Texture->var text_texture;
		Surface->var text_surface;
		
		var text_width;
		var text_height;
		
		var select_function;
		var select_argument;
		
		var next_page;
	}
	
	var card_count;
	var cards;
	
	var target_card_selection;
	var card_selection;
	
	var next_page;
	var prev_page;
	
	var next_function;
	var next_argument;
	
	var prev_function;
	var prev_argument;
	
	var block_next;
	var block_prev;
	
	func show(var prev_page) {
		if (prev_page) self.prev_page = prev_page;
		self.target_visibility = CONSOLE_PAGE_SHOWN;
	}
	
	func hide {
		self.target_visibility = CONSOLE_PAGE_HIDDEN;
	}
	
	func draw(var fps) {
		if (self.target_visibility == CONSOLE_PAGE_SHOWN) {
			if (not self.block_next and console_input_button_down()) {
				if (self.card_count) {
					Console_card->var card = ?(self.cards + 8 * self.target_card_selection);
					
					if (card.next_page) {
						self.hide();
						Console_page->(card.next_page).show(self);
					}
				}
				
				if (self.target_visibility == CONSOLE_PAGE_SHOWN) {
					self.hide();
					
					if (self.next_page) {
						Console_page->(self.next_page).show(self);
					}
				}
				
				if (self.next_function and self.target_visibility == CONSOLE_PAGE_HIDDEN) {
					self.next_function(self.next_argument);
				}
			} else if (not self.block_prev and console_input_button_up()) {
				if (self.target_visibility == CONSOLE_PAGE_SHOWN) {
					self.hide();
					
					if (self.prev_page) {
						Console_page->(self.prev_page).show(0);
					}
				}
				
				if (self.prev_function and self.target_visibility == CONSOLE_PAGE_HIDDEN) {
					self.prev_function(self.prev_argument);
				}
			}
		}
		
		if (self.target_visibility == CONSOLE_PAGE_SHOWN and self.card_count) {
			var selection_changed = 0;
			
			if (console_input_button_right()) {
				self.target_card_selection = self.target_card_selection + 1;
				selection_changed = 1;
				
			} if (console_input_button_left()) {
				self.target_card_selection = self.target_card_selection - 1;
				selection_changed = 1;
			}
			
			if (self.target_card_selection < 0) self.target_card_selection = self.card_count - 1;
			else if (self.target_card_selection >= self.card_count) self.target_card_selection = 0;
			
			if (selection_changed) {
				Console_card->var card = ?(self.cards + 8 * self.target_card_selection);
				
				if (card.select_function) {
					card.select_function(card.select_argument);
				}
			}
		}
		
		if (self.target_visibility == CONSOLE_PAGE_HIDDEN and self.transition < PRECISION / 16) return 0;
		self.transition = self.transition + (self.target_visibility * PRECISION - self.transition) * 7 / fps;
		var transition = self.transition;
		
		var layer = self.target_visibility;
		
		if (self.card_count) {
			self.card_selection = self.card_selection + (self.target_card_selection * PRECISION - self.card_selection) * 10 / fps;
			
			card_shadow.layer layer + 4;
			
			var index = -1;
			while ((index = index + 1) < self.card_count) {
				Console_card->var card = ?(self.cards + 8 * index);
				
				var x = index * PRECISION - self.card_selection;
				var importance = PRECISION - Math.min(Math.abs(x), PRECISION);
				
				card_shadow.size PRECISION + importance / 3, PRECISION + importance / 3;
				card_shadow.colour shadow_r, shadow_g, shadow_b, Math.mul_float(Math.mul_float(shadow_a, transition), PRECISION / 2 + importance / 2);
				
				var y = Math.mul_float(-PRECISION + transition, PRECISION / 2 + importance / 2) - PRECISION / 3;
				card_shadow.draw x, y;
				
				if (card.text_surface) {
					card.text_surface.size Math.mul_float(Math.pixels_x(card.text_width), PRECISION / 3 * 2 + importance / 3), Math.mul_float(Math.pixels_y(card.text_height), PRECISION / 3 * 2 + importance / 3);
					card.text_surface.colour accent_r, accent_g, accent_b, Math.mul_float(Math.mul_float(accent_a, transition), PRECISION / 2 + importance / 2);
					card.text_surface.layer layer + 6;
					
					card.text_surface.draw x, y + PRECISION / 12;
				}
			}
			
		} if (self.paragraph_surface) {
			self.paragraph_surface.size Math.pixels_x(self.paragraph_width), Math.pixels_y(self.paragraph_height);
			self.paragraph_surface.colour accent_r, accent_g, accent_b, Math.mul_float(accent_a, transition);
			self.paragraph_surface.layer layer + 10;
			
			if (self.title_surface) self.paragraph_surface.draw 0, -PRECISION + transition / 3 * 2;
			else                    self.paragraph_surface.draw 0, -PRECISION + transition;
			
		} if (self.title_surface) {
			self.title_surface.size Math.pixels_x(self.title_width), Math.pixels_y(self.title_height);
			self.title_surface.colour accent_r, accent_g, accent_b, Math.mul_float(accent_a, transition);
			self.title_surface.layer layer + 11;
			
			if (self.paragraph_surface or self.card_count) self.title_surface.draw 0,  PRECISION - transition / 3;
			else                                           self.title_surface.draw 0, -PRECISION + transition;
		}
	}
	
	func next(var next_page) self.next_page = next_page;
	func prev(var prev_page) self.prev_page = prev_page;
	
	func set_next(var function, var argument) {
		self.next_function = function;
		self.next_argument = argument;
	}
	
	func set_prev(var function, var argument) {
		self.prev_function = function;
		self.prev_argument = argument;
	}
	
	func set_cards(var count) {
		self.card_count = count;
		self.cards = new(8 * self.card_count);
		
		var index = -1;
		while ((index = index + 1) < self.card_count) {
			?(self.cards + 8 * index) = new(Console_card);
		}
	}
	
	func set_card_next(var index, var next_page) {
		Console_card->var card = ?(self.cards + 8 * index);
		card.next_page = next_page;
	}
	
	func set_card_text(var index, var text) {
		Console_card->var card = ?(self.cards + 8 * index);
		
		if (not card.text_surface) {
			card.text_surface = new(Surface).construct();
		}
		
		main_font.size PRECISION / 7;
		card.text_surface.texture card.text_texture = main_font.create_texture(text);
		
		card.text_width  = main_font.get_width (text);
		card.text_height = main_font.get_height(text);
	}
	
	func set_card_select(var index, var function, var argument) {
		Console_card->var card = ?(self.cards + 8 * index);
		
		card.select_function = function;
		card.select_argument = argument;
	}
	
	func set_title(var text) {
		if (not self.title_surface) {
			self.title_surface = new(Surface).construct();
		}
		
		main_font.size PRECISION / 5;
		self.title_surface.texture self.title_texture = main_font.create_texture(text);
		
		self.title_width  = main_font.get_width (text);
		self.title_height = main_font.get_height(text);
	}
	
	func set_paragraph(var text) {
		if (not self.paragraph_surface) {
			self.paragraph_surface = new(Surface).construct();
		}
		
		main_font.size PRECISION / 15;
		self.paragraph_surface.texture self.paragraph_texture = main_font.create_texture(text);
		
		self.paragraph_width  = main_font.get_width (text);
		self.paragraph_height = main_font.get_height(text);
	}
	
	func construct {
		self.target_visibility = CONSOLE_PAGE_HIDDEN;
		self.transition = 0;
		return self;
	}
}
