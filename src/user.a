
import lib/devices/io/fs.a
import lib/math.a

print "[CONSOLE_OS] Reading user data ...\n";

var USER_GENDER_UNSPECIFIED       = 0;
var USER_GENDER_MALE              = 1;
var USER_GENDER_FEMALE            = 2;
var USER_GENDER_NON_BINARY        = 3;
var USER_GENDER_ATTACK_HELICOPTER = 4;
var USER_GENDER_BOT               = 5;

var USER_LANGUAGE_EN_UK = 0;
var USER_LANGUAGE_FR_BE = 1;
var USER_LANGUAGE_NL_BE = 3;
var USER_LANGUAGE_NL    = 4;
var USER_LANGUAGE_DE    = 5;

var user_developer = 0;
var user_name      = "<USER_NAME>";
var user_language  = USER_LANGUAGE_EN_UK;
var user_address   = "<USER_ADDRESS>";
var user_gender    = USER_GENDER_UNSPECIFIED;
var user_pewdiepie = 0;

func print_user_data {
	print "[CONSOLE_OS]\tUSER_DEVELOPER = "   ++ str(user_developer) ++ "\n";
	print "[CONSOLE_OS]\tUSER_NAME      = \"" ++     user_name       ++ "\"\n";
	print "[CONSOLE_OS]\tUSER_LANGUAGE  = "   ++ str(user_language ) ++ "\n";
	print "[CONSOLE_OS]\tUSER_ADDRESS   = \"" ++     user_address    ++ "\"\n";
	print "[CONSOLE_OS]\tUSER_GENDER    = "   ++ str(user_gender   ) ++ "\n";
	print "[CONSOLE_OS]\tUSER_PEWDIEPIE = "   ++ str(user_pewdiepie) ++ "\n";
}

func save_user_data {
	print "[CONSOLE_OS] Saving user data ...\n";
	
	var data = "name:" ++ user_name;
	data = data ++ "\naddr:" ++ user_address;
	
	data = data ++ "\nlang:" ++ str(user_language);
	data = data ++ "\ngend:" ++ str(user_gender);
	
	if (user_developer) data = data ++ "\ndevl:yes";
	else                data = data ++ "\ndevl:no";
	
	if (user_pewdiepie) data = data ++ "\npewd:yes";
	else                data = data ++ "\npewd:no";
	
	data = data ++ "\n";
	
	var index = -1;
	loop if (not *(data + (index = index + 1))) break
	
	if (Fs.write(CONSOLE_USER_FILE_PATH, data, index + 1)) {
		print "[CONSOLE_OS]\tWARNING Failed to write to user data file\n";
	}
}

var user_file_data;
var user_file_bytes;

if (Fs.read(CONSOLE_USER_FILE_PATH, &user_file_data, &user_file_bytes)) {
	print "[CONSOLE_OS] WARNING Failed to read user data file\n";
} else {
	var previous_key = 0;
	var previous_value = -1;
	
	var index = 0;
	loop {
		byte current = *(user_file_data + index);
		
		if (not current) {
			break
		} else if (previous_value >= 0 and (current == 0x3B or current == 0x0A)) {
			*(user_file_data + index) = 0;
			
			var key   = user_file_data + previous_key;
			var value = user_file_data + previous_value;
			
			if      (key === "name") user_name      = value;
			else if (key === "addr") user_address   = value;
			
			else if (key === "devl") user_developer = value === "yes";
			else if (key === "pewd") user_pewdiepie = value === "yes";
			
			else if (key === "gend") {
				if      (value === "unspecified"      ) user_gender = USER_GENDER_UNSPECIFIED;
				else if (value === "male"             ) user_gender = USER_GENDER_MALE;
				else if (value === "female"           ) user_gender = USER_GENDER_FEMALE;
				else if (value === "non_binary"       ) user_gender = USER_GENDER_NON_BINARY;
				else if (value === "attack_helicopter") user_gender = USER_GENDER_ATTACK_HELICOPTER;
				else if (value === "bot"              ) user_gender = USER_GENDER_BOT;
				else                                    user_gender = Math.string_to_int(value);
				
			} else if (key === "lang") {
				if      (value === "en_uk") user_language = USER_LANGUAGE_EN_UK;
				else if (value === "fr_be") user_language = USER_LANGUAGE_FR_BE;
				else if (value === "nl_be") user_language = USER_LANGUAGE_NL_BE;
				else if (value === "nl"   ) user_language = USER_LANGUAGE_NL;
				else if (value === "de"   ) user_language = USER_LANGUAGE_DE;
				else                        user_language = Math.string_to_int(value);
				
			}
			
			previous_value = -1;
			previous_key = index + 1;
			
		} else if (current == 0x3A) {
			*(user_file_data + index) = 0;
			previous_value = index + 1;
		}
		
		index = index + 1;
	}
}

print "[CONSOLE_OS] Parsed user data, here are the results:\n";
print_user_data();
